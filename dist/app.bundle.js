!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!g[e]||!_[e])return;for(var n in _[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(N[n]=t[n]);0==--b&&0===S&&T()}(e,n),t&&t(e,n)};var n,i=!0,o="da885cfa9cc9bd2ed5ad",r=1e4,d={},s=[],a=[];function u(e){var t=k[e];if(!t)return O;var i=function(i){return t.hot.active?(k[i]?-1===k[i].parents.indexOf(e)&&k[i].parents.push(e):(s=[e],n=i),-1===t.children.indexOf(i)&&t.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),s=[]),O(i)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return O[e]},set:function(t){O[e]=t}}};for(var r in O)Object.prototype.hasOwnProperty.call(O,r)&&"e"!==r&&"t"!==r&&Object.defineProperty(i,r,o(r));return i.e=function(e){return"ready"===h&&c("prepare"),S++,O.e(e).then(t,function(e){throw t(),e});function t(){S--,"prepare"===h&&(M[e]||x(e),0===S&&0===b&&T())}},i.t=function(e,t){return 1&t&&(e=i(e)),O.t(e,-2&t)},i}var l=[],h="idle";function c(e){h=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var p,N,f,m,b=0,S=0,M={},_={},g={};function v(e){return+e+""===e?+e:e}function y(e){if("idle"!==h)throw new Error("check() is only allowed in idle status");return i=e,c("check"),(t=r,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,r=O.p+""+o+".hot-update.json";i.open("GET",r,!0),i.timeout=t,i.send(null)}catch(e){return n(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+r+" timed out."));else if(404===i.status)e();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+r+" failed."));else{try{var t=JSON.parse(i.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return c(P()?"ready":"idle"),null;_={},M={},g=e.c,f=e.h,c("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});N={};return x(0),"prepare"===h&&0===S&&0===b&&T(),t});var t}function x(e){g[e]?(_[e]=!0,b++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=O.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):M[e]=!0}function T(){c("ready");var e=p;if(p=null,e)if(i)Promise.resolve().then(function(){return w(i)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in N)Object.prototype.hasOwnProperty.call(N,n)&&t.push(v(n));e.resolve(t)}}function w(t){if("ready"!==h)throw new Error("apply() is only allowed in ready status");return function t(i){P();var r;var a;var u;var l;var h;function p(e){for(var t=[e],n={},i=t.map(function(e){return{chain:[e],id:e}});i.length>0;){var o=i.pop(),r=o.id,d=o.chain;if((l=k[r])&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:d,moduleId:r};if(l.hot._main)return{type:"unaccepted",chain:d,moduleId:r};for(var s=0;s<l.parents.length;s++){var a=l.parents[s],u=k[a];if(u){if(u.hot._declinedDependencies[r])return{type:"declined",chain:d.concat([a]),moduleId:r,parentId:a};-1===t.indexOf(a)&&(u.hot._acceptedDependencies[r]?(n[a]||(n[a]=[]),b(n[a],[r])):(delete n[a],t.push(a),i.push({chain:d.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function b(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}var S={};var M=[];var _={};var y=function(){console.warn("[HMR] unexpected require("+T.moduleId+") to disposed module")};for(var x in N)if(Object.prototype.hasOwnProperty.call(N,x)){var T;h=v(x),T=N[x]?p(h):{type:"disposed",moduleId:x};var w=!1,A=!1,X=!1,C="";switch(T.chain&&(C="\nUpdate propagation: "+T.chain.join(" -> ")),T.type){case"self-declined":i.onDeclined&&i.onDeclined(T),i.ignoreDeclined||(w=new Error("Aborted because of self decline: "+T.moduleId+C));break;case"declined":i.onDeclined&&i.onDeclined(T),i.ignoreDeclined||(w=new Error("Aborted because of declined dependency: "+T.moduleId+" in "+T.parentId+C));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(T),i.ignoreUnaccepted||(w=new Error("Aborted because "+h+" is not accepted"+C));break;case"accepted":i.onAccepted&&i.onAccepted(T),A=!0;break;case"disposed":i.onDisposed&&i.onDisposed(T),X=!0;break;default:throw new Error("Unexception type "+T.type)}if(w)return c("abort"),Promise.reject(w);if(A)for(h in _[h]=N[h],b(M,T.outdatedModules),T.outdatedDependencies)Object.prototype.hasOwnProperty.call(T.outdatedDependencies,h)&&(S[h]||(S[h]=[]),b(S[h],T.outdatedDependencies[h]));X&&(b(M,[T.moduleId]),_[h]=y)}var U=[];for(a=0;a<M.length;a++)h=M[a],k[h]&&k[h].hot._selfAccepted&&_[h]!==y&&!k[h].hot._selfInvalidated&&U.push({module:h,parents:k[h].parents.slice(),errorHandler:k[h].hot._selfAccepted});c("dispose");Object.keys(g).forEach(function(e){!1===g[e]&&function(e){delete installedChunks[e]}(e)});var E;var j=M.slice();for(;j.length>0;)if(h=j.pop(),l=k[h]){var D={},Y=l.hot._disposeHandlers;for(u=0;u<Y.length;u++)(r=Y[u])(D);for(d[h]=D,l.hot.active=!1,delete k[h],delete S[h],u=0;u<l.children.length;u++){var I=k[l.children[u]];I&&((E=I.parents.indexOf(h))>=0&&I.parents.splice(E,1))}}var H;var L;for(h in S)if(Object.prototype.hasOwnProperty.call(S,h)&&(l=k[h]))for(L=S[h],u=0;u<L.length;u++)H=L[u],(E=l.children.indexOf(H))>=0&&l.children.splice(E,1);c("apply");void 0!==f&&(o=f,f=void 0);N=void 0;for(h in _)Object.prototype.hasOwnProperty.call(_,h)&&(e[h]=_[h]);var W=null;for(h in S)if(Object.prototype.hasOwnProperty.call(S,h)&&(l=k[h])){L=S[h];var q=[];for(a=0;a<L.length;a++)if(H=L[a],r=l.hot._acceptedDependencies[H]){if(-1!==q.indexOf(r))continue;q.push(r)}for(a=0;a<q.length;a++){r=q[a];try{r(L)}catch(e){i.onErrored&&i.onErrored({type:"accept-errored",moduleId:h,dependencyId:L[a],error:e}),i.ignoreErrored||W||(W=e)}}}for(a=0;a<U.length;a++){var F=U[a];h=F.module,s=F.parents,n=h;try{O(h)}catch(e){if("function"==typeof F.errorHandler)try{F.errorHandler(e)}catch(t){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:h,error:t,originalError:e}),i.ignoreErrored||W||(W=t),W||(W=e)}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:h,error:e}),i.ignoreErrored||W||(W=e)}}if(W)return c("fail"),Promise.reject(W);if(m)return t(i).then(function(e){return M.forEach(function(t){e.indexOf(t)<0&&e.push(t)}),e});c("idle");return new Promise(function(e){e(M)})}(t=t||{})}function P(){if(m)return N||(N={}),m.forEach(A),m=void 0,!0}function A(t){Object.prototype.hasOwnProperty.call(N,t)||(N[t]=e[t])}var k={};function O(t){if(k[t])return k[t].exports;var i=k[t]={i:t,l:!1,exports:{},hot:function(t){var i={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(e,t){if(void 0===e)i._selfAccepted=!0;else if("function"==typeof e)i._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)i._acceptedDependencies[e[n]]=t||function(){};else i._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)i._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)i._declinedDependencies[e[t]]=!0;else i._declinedDependencies[e]=!0},dispose:function(e){i._disposeHandlers.push(e)},addDisposeHandler:function(e){i._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=i._disposeHandlers.indexOf(e);t>=0&&i._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,h){case"idle":(N={})[t]=e[t],c("ready");break;case"ready":A(t);break;case"prepare":case"check":case"dispose":case"apply":(m=m||[]).push(t)}},check:y,apply:w,status:function(e){if(!e)return h;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:d[t]};return n=void 0,i}(t),parents:(a=s,s=[],a),children:[]};return e[t].call(i.exports,i,i.exports,u(t)),i.l=!0,i.exports}O.m=e,O.c=k,O.d=function(e,t,n){O.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},O.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},O.t=function(e,t){if(1&t&&(e=O(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(O.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)O.d(n,i,function(t){return e[t]}.bind(null,i));return n},O.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return O.d(t,"a",t),t},O.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},O.p="",O.h=function(){return o},u(0)(O.s=0)}([function(e,t,n){"use strict";n.r(t);var i=class{constructor(){var e=document.getElementById("myCanvas");this.ctx=e.getContext("2d"),this.unit=10,this.startX=500,this.startY=20}_isTrue(e){return null!=e&&null!=e}paint(e){this.ctx.clearRect(0,0,1e3,800);for(let t in e){let{x:n,y:i,node_num:o,left_node_num:r,right_node_num:s,backgroundColor:a}=e[t],u=r,l=s;if(n+=this.startX,i+=this.startY,this._isTrue(o)){this.drawNode(n,i,t,a);let o,r,s,h,c=n,p=i+1.5*this.unit;if(this._isTrue(u)){let t=u;o=e[t].x+this.startX,r=e[t].y-1.5*this.unit+this.startY}else o=n-d.nodeMapUnitX,r=i+d.nodeMapUnitY-1.5*this.unit;if(this._isTrue(l)){let t=l;s=e[t].x+this.startX,h=e[t].y-1.5*this.unit+this.startY}else s=n+d.nodeMapUnitX,h=i+d.nodeMapUnitY-1.5*this.unit;this.line(c,p,o,r),this.line(c,p,s,h)}else this.drawNullNode(n,i)}}paintForLineTrans(e,t,n){this.ctx.clearRect(0,0,1e3,800);for(let i in e){let{x:o,y:r,node_num:s,left_node_num:a,right_node_num:u,backgroundColor:l}=e[i],h=a,c=u,p=t[i],N=p&&p.left_node_num,f=p&&p.right_node_num;if(o+=this.startX,r+=this.startY,this._isTrue(s)){this.drawNode(o,r,i,l);let t,s,a,u,p,m,b,S,M=o,_=r+1.5*this.unit;if(this._isTrue(h)){let n=h;t=e[n].x+this.startX,s=e[n].y-1.5*this.unit+this.startY}else t=o-d.nodeMapUnitX,s=r+d.nodeMapUnitY-1.5*this.unit;if(this._isTrue(c)){let t=c;a=e[t].x+this.startX,u=e[t].y-1.5*this.unit+this.startY}else a=o+d.nodeMapUnitX,u=r+d.nodeMapUnitY-1.5*this.unit;if(this._isTrue(N)){let t=N;p=e[t].x+this.startX,m=e[t].y-1.5*this.unit+this.startY}else p=o-d.nodeMapUnitX,m=r+d.nodeMapUnitY-1.5*this.unit;if(this._isTrue(f)){let t=f;b=e[t].x+this.startX,S=e[t].y-1.5*this.unit+this.startY}else b=o+d.nodeMapUnitX,S=r+d.nodeMapUnitY-1.5*this.unit;this.line(M,_,(p-t)*n+t,(m-s)*n+s),this.line(M,_,(b-a)*n+a,(S-u)*n+u)}else this.drawNullNode(o,r)}}circle(e,t,n,i){this.ctx.beginPath(),this.ctx.arc(e,t,n,0,2*Math.PI),this.ctx.fillStyle=i,this.ctx.fill()}text(e,t,n,i){this.ctx.font=n+"px sans-serif";let o=t+n/2.5,r=e-n*i.length/3.4;this.ctx.fillStyle="white",this.ctx.fillText(i,r,o)}square(e,t,n,i){let o=e-n/2,r=t-i/2;this.ctx.fillStyle="black",this.ctx.fillRect(o,r,n,i)}line(e,t,n,i){this.ctx.moveTo(e,t),this.ctx.lineTo(n,i),this.ctx.strokeStyle="black",this.ctx.stroke()}drawNode(e,t,n,i="black"){let o=1.5*this.unit;this.circle(e,t,o,i),n+="";let r=1.2*this.unit;this.text(e,t,r,n)}drawNullNode(e,t){let n=2*this.unit,i=3*this.unit;this.square(e,t,n,i);let o=1.8*this.unit;this.text(e,t,o,"n")}};class o{constructor(e){this.draw=new i,this.paintNodeMap(e),this.startTime="",this.nodeMap=null,this.preNodeMap=null,this.transTime=1e3,this.transation=[],this.isAni=!1}addTransation(e,t){t?this.transation.push({nodeMap:e,preNodeMap:t}):this.transation.push({nodeMap:e}),this.runTransation()}sleep(e){return new Promise(t=>{setTimeout(()=>{t()},e)})}async runTransation(){if(!this.isAni&&this.transation.length){this.isAni=!0;let{nodeMap:e,preNodeMap:t}=this.transation.splice(0,1)[0];t?(await this.sleep(500),this.getTheLineChange(e,t),await this.sleep(1600),this.getTheChange(e,t),await this.sleep(1600)):this.paintNodeMap(e),this.isAni=!1,this.runTransation()}}paintNodeMap(e){this.draw.paint(e)}paintLineTrans(e){this.draw.paintForLineTrans(this.preNodeMap,this.nodeMap,e)}getTheLineChange(e,t){this.nodeMap=e,this.preNodeMap=t,requestAnimationFrame(this._stepLineAni.bind(this))}_stepLineAni(e){if(this.startTime||(this.startTime=e),this.paintLineTrans((e-this.startTime)/this.transTime),e-this.startTime>this.transTime)return this.paintLineTrans(1),void(this.startTime="");requestAnimationFrame(this._stepLineAni.bind(this))}getTheChange(e,t){this.nodeMap=e,this.preNodeMap=t,this.oldToNewNodeMap={};for(let e in this.nodeMap){let t=this.nodeMap[e],n=this.preNodeMap[e];t&&n&&(this.oldToNewNodeMap[e]={x_gap:n.x-t.x,y_gap:n.y-t.y,backgroundColor:n.backgroundColor})}requestAnimationFrame(this._stepAni.bind(this))}_stepAni(e){this.startTime||(this.startTime=e);let t={};for(let n in this.oldToNewNodeMap){let i={x:this.nodeMap[n].x,y:this.nodeMap[n].y,node_num:this.nodeMap[n].node_num,left_node_num:this.nodeMap[n].left_node_num,right_node_num:this.nodeMap[n].right_node_num};t[n]=i,t[n].x+=(1-(e-this.startTime)/this.transTime)*this.oldToNewNodeMap[n].x_gap,t[n].y+=(1-(e-this.startTime)/this.transTime)*this.oldToNewNodeMap[n].y_gap,t[n].backgroundColor=this.nodeMap[n].backgroundColor}if(this.paintNodeMap(t),e-this.startTime>this.transTime)return this.paintNodeMap(this.nodeMap),void(this.startTime="");requestAnimationFrame(this._stepAni.bind(this))}}class r{constructor(e=0){this.num=e-0,this.firstSubNode=null,this.secondSubNode=null,this.parentNode=null,this.nodeMinNum=1,this.nodeMaxNum=1,this.initNodeX=0,this.initNodeY=0,this.id=r.id++}}r.id=0;class d{constructor(e=new r(0)){this.initNode=e,this.preSonNode=null,this.nodeJustAdd=null,this.nodeStartJustRemove=null,this.nodeMap={},this.preNodeMap={},this.oldToNewNodeMap={},this.nodeWidthMap={},this.Controller=new o,this.traverseTree(this.initNode),this.Controller.paintNodeMap(this.nodeMap)}getTreeNodeBackgroundColor(e,t){if(!e)return;let n,i=e.num;e==this._getInitNode(this.initNode)?(n="black",t-=1):"red"==this.nodeMap[e.parentNode.num].backgroundColor?(n="black",t--):e.nodeMinNum>t?n="red":(n="black",t--),this.nodeMap[i].backgroundColor=n,this.getTreeNodeBackgroundColor(e.firstSubNode,t),this.getTreeNodeBackgroundColor(e.secondSubNode,t)}traverseTree(e){if(null==e.parentNode)e.initNodeX=0,e.initNodeY=0;else{e.initNodeY=e.parentNode.initNodeY+d.nodeMapUnitY;let t=this._getWhichSideFromParent(e);console.log(t),"left"==t?e.secondSubNode?e.initNodeX=e.parentNode.initNodeX-2*d.nodeMapUnitX-this._getNodeWidth(e.secondSubNode)*d.nodeMapUnitX:e.initNodeX=e.parentNode.initNodeX-2*d.nodeMapUnitX:e.firstSubNode?e.initNodeX=e.parentNode.initNodeX+2*d.nodeMapUnitX+this._getNodeWidth(e.firstSubNode)*d.nodeMapUnitX:e.initNodeX=e.parentNode.initNodeX+2*d.nodeMapUnitX}this.nodeMap[e.num]={x:e.initNodeX,y:e.initNodeY,node_num:e.num};{let t=e.firstSubNode,n=e.secondSubNode;e.nodeMaxNum,d.nodeMapUnitX;null!=t?(this.nodeMap[e.num].left_node_num=t.num,this.traverseTree(t)):(this.nodeMap[e.num].left_node_num=null,this.nodeMap["null_"+e.num+"_left"]={x:e.initNodeX-d.nodeMapUnitX,y:e.initNodeY+d.nodeMapUnitY,node_num:null}),null!=n?(this.nodeMap[e.num].right_node_num=n.num,this.traverseTree(n)):(this.nodeMap[e.num].right_node_num=null,this.nodeMap["null_"+e.num+"_right"]={x:e.initNodeX+d.nodeMapUnitX,y:e.initNodeY+d.nodeMapUnitY,node_num:null})}}_getNodeWidth(e){return e?(this.nodeWidthMap[e.num]||(this.nodeWidthMap[e.num]=this._getNodeWidth(e.firstSubNode)+this._getNodeWidth(e.secondSubNode)+2),this.nodeWidthMap[e.num]):0}_getWhichSideFromParent(e){return e.parentNode?e.parentNode.firstSubNode==e?"left":"right":""}findNode(e,t=this.initNode){if(!t)return null;let n;if(e>t.num)n=t.secondSubNode;else{if(!(e<t.num))return t;n=t.firstSubNode}return this.findNode(e,n)}_findParentNode(e,t=this.initNode){let n;if(e>t.num){if(!(n=t.secondSubNode))return{parentNode:t,position:"secondSubNode",otherPosition:"firstSubNode"}}else if(e<t.num&&!(n=t.firstSubNode))return{parentNode:t,position:"firstSubNode",otherPosition:"secondSubNode"};return this._findParentNode(e,n)}addNode(e){let t=e.num;if(this.findNode(t))return console.log("已经有这个节点了"),!1;let{parentNode:n,position:i}=this._findParentNode(t);return n[i]=e,e.parentNode=n,this.nodeJustAdd=e,this._changeParentNodeMinAndMaxNum(e.parentNode,"add"),this.nodeMap={},this.nodeWidthMap={},this.traverseTree(this.initNode),this.getTreeNodeBackgroundColor(this.initNode,this.initNode.nodeMinNum),this.Controller.addTransation(this.nodeMap),this._resetPreSonNode(),this._fixParentNode(e,"add"),!0}_changeParentNodeMinAndMaxNum(e){e.nodeMinNum,e.nodeMaxNum;this._setSubNodeMinAndMaxNum(e),e.parentNode&&this._changeParentNodeMinAndMaxNum(e.parentNode)}_resetPreSonNode(e){if("remove"==e){let{longSubNodeStr:e}=this._getSubNodeStr(this.nodeStartJustRemove);this.preSonNode=this.nodeStartJustRemove[e]}else this.preSonNode=null}removeNode(e){let t=this.findNode(e);if(!t)return console.log("没有这个节点"),!1;if(null==t.firstSubNode&&null==t.secondSubNode&&e==this.initNode.num)return console.log("只剩最后一个节点，不要删除"),!1;let n,i,o=t.parentNode;if(o&&(n=e<o.num?"firstSubNode":"secondSubNode"),null==t.firstSubNode&&null==t.secondSubNode)o[n]=null,t=null,i=o;else if(null==t.firstSubNode){let e=this._findNodeWhichCloseToMe(t,"right"),r=e.secondSubNode,d=e.parentNode,s=this._getWhichSideFromParent(e);r?(r.parentNode=d,i=r):i=d!=t?d:e,"left"==s?d.firstSubNode=r:d.secondSubNode=r,e.parentNode=o,o&&(o[n]=e),e.firstSubNode=t.firstSubNode,e.secondSubNode=t.secondSubNode,t.firstSubNode&&(t.firstSubNode.parentNode=e),t.secondSubNode&&(t.secondSubNode.parentNode=e),t==this.initNode&&(this.initNode=e)}else{let e=this._findNodeWhichCloseToMe(t,"left"),r=e.firstSubNode,d=e.parentNode,s=this._getWhichSideFromParent(e);r?(r.parentNode=d,i=r):i=d!=t?d:e,"left"==s?d.firstSubNode=r:d.secondSubNode=r,e.parentNode=o,o&&(o[n]=e),e.firstSubNode=t.firstSubNode,e.secondSubNode=t.secondSubNode,t.firstSubNode&&(t.firstSubNode.parentNode=e),t.secondSubNode&&(t.secondSubNode.parentNode=e),t==this.initNode&&(this.initNode=e)}return this.nodeStartJustRemove=i,this._changeParentNodeMinAndMaxNum(this.nodeStartJustRemove),this.nodeMap={},this.nodeWidthMap={},this.traverseTree(this.initNode),this.getTreeNodeBackgroundColor(this.initNode,this.initNode.nodeMinNum),this.Controller.addTransation(this.nodeMap),this._resetPreSonNode("remove"),this._fixParentNode(this.nodeStartJustRemove,"remove"),!0}_findNodeWhichCloseToMe(e,t){if("left"==t){let t=e.firstSubNode;return null==t.secondSubNode?t:this._findTheFarestNode(t,"right")}{let t=e.secondSubNode;return null==t.secondSubNode?t:this._findTheFarestNode(leftNode,"left")}}_findTheFarestNode(e,t){if("left"==t){let n=e.firstSubNode;return null==n?e:this._findTheFarestNode(n,t)}{let n=e.secondSubNode;return null==n?e:this._findTheFarestNode(n,t)}}_getNumOfLayersBetweenNodeAndParentNode(e,t){if(e==t)return 0;let n=1;for(;e.parentNode!=t;)e=e.parentNode,n++;return n}_fixParentNode(e,t){if(this._setSubNodeMinAndMaxNum(e),"add"==t){let t=this._getNumOfLayersBetweenNodeAndParentNode(this.nodeJustAdd,e)+1;t>2*e.nodeMinNum&&(this._preSonNodeCheck(),this._setSubNodeMinAndMaxNum(e),(t=null!=this.nodeJustAdd.firstSubNode||null!=this.nodeJustAdd.secondSubNode?this._getNumOfLayersBetweenNodeAndParentNode(this.nodeJustAdd,e)+2:this._getNumOfLayersBetweenNodeAndParentNode(this.nodeJustAdd,e)+1)>2*e.nodeMinNum&&(e=this._transPosition(e))),this.preSonNode=e}else{let t=this._getNumOfLayersBetweenNodeAndParentNode(this.nodeStartJustRemove,e)+1;if(2*t<e.nodeMaxNum&&(this._preSonNodeCheck(),this._setSubNodeMinAndMaxNum(e),2*t<e.nodeMaxNum&&(e=this._transPosition(e,"async"))),e.parentNode){let{longSubNodeStr:t}=this._getSubNodeStr(e.parentNode);this.preSonNode=e.parentNode[t]}}null!=e.parentNode?this._fixParentNode(e.parentNode,t):this.initNode=e}_setSubNodeMinAndMaxNum(e){if(!e)return;let t=e.firstSubNode,n=e.secondSubNode,i=t?t.nodeMinNum+1:1,o=n?n.nodeMinNum+1:1,r=t?t.nodeMaxNum+1:1,d=n?n.nodeMaxNum+1:1;e.nodeMinNum=Math.min(i,o),e.nodeMaxNum=Math.max(r,d)}_preSonNodeCheck(){if(this.preSonNode&&!(null==this.preSonNode.firstSubNode&&null==this.preSonNode.secondSubNode||this.preSonNode.firstSubNode&&this.preSonNode.secondSubNode&&this.preSonNode.firstSubNode.nodeMinNum==this.preSonNode.secondSubNode.nodeMinNum)){let e,{longSubNodeStr:t}=this._getSubNodeStr(this.preSonNode);if(t==(e=this.preSonNode.parentNode.firstSubNode==this.preSonNode?"firstSubNode":"secondSubNode"))return;this.preSonNode=this._transPosition(this.preSonNode)}}_getSubNodeStr(e){let t,n;return null==e.firstSubNode?(t="firstSubNode",n="secondSubNode"):null==e.secondSubNode?(t="secondSubNode",n="firstSubNode"):e.firstSubNode.nodeMinNum<=e.secondSubNode.nodeMinNum?(t="firstSubNode",n="secondSubNode"):(t="secondSubNode",n="firstSubNode"),{shortSubNodeStr:t,longSubNodeStr:n}}_transPosition(e,t){let n,{shortSubNodeStr:i,longSubNodeStr:o}=this._getSubNodeStr(e),r=e.parentNode,d=e[o];r&&(r[n=r.firstSubNode==e?"firstSubNode":"secondSubNode"]=d),d.parentNode=r,e.parentNode=d;let s=d[i];d[i]=e,e[o]=s,s&&(s.parentNode=e),this._setSubNodeMinAndMaxNum(d.firstSubNode),this._setSubNodeMinAndMaxNum(d.secondSubNode),this._setSubNodeMinAndMaxNum(d),this.preNodeMap=this.nodeMap,this.nodeMap={},this.nodeWidthMap={};let a=this._getInitNode(this.initNode);return this.traverseTree(a),"async"==t?setTimeout(()=>{this.getTreeNodeBackgroundColor(a,a.nodeMinNum),this.Controller.addTransation(this.nodeMap,this.preNodeMap)},0):(this.getTreeNodeBackgroundColor(a,a.nodeMinNum),this.Controller.addTransation(this.nodeMap,this.preNodeMap)),d}_getInitNode(e){return null==e.parentNode?e:this._getInitNode(e.parentNode)}}d.nodeMapUnitX=18,d.nodeMapUnitY=50;let s=new d;window.onload=function(){document.querySelector(".add").addEventListener("click",function(){let e=document.querySelector("#inputAdd").value,t=new r(e);s.addNode(t)||alert("已经有这个数了")}),document.querySelector(".remove").addEventListener("click",function(){let e=document.querySelector("#inputAdd").value;s.removeNode(e)})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,